{"version":3,"sources":["services/Http.js","services/RepoService.js","components/Search/Search.jsx","utils/Color.js","components/RepoStats/RepoStats.js","components/App.js","serviceWorker.js","index.js"],"names":["Http","Object","classCallCheck","this","instance","url","getUrl","constructor","buildUrl","axios","get","urlToBuild","concat","process","RepoService","http","query","then","resp","slug","data","length","catch","err","response","status","userName","_ref","repoName","EMPTY_LABEL","Search","state","isLoading","options","emptyLabel","_repoService","_handleSelect","selected","slicedToArray","_this","props","onSelectRepo","_handleSearch","setState","searchReposByUser","_ref3","stateToSet","_this$state","react_default","a","createElement","lib","autoFocus","onSearch","onChange","minLength","labelKey","placeholder","React","Component","generateRgbaColor","o","Math","round","r","random","join","RepoStats","title","contributors","chartData","labels","datasets","_fetchRepoContributors","_this$props$repo","repo","name","owner","getRepoContributors","login","_parseDataFromContributors","newChartData","objectSpread","borderColor","backgroundColor","hoverBorderColor","hoverBackgroundColor","forEach","user","baseColor","push","contributions","borderWidth","label","prevProps","prevRepo","id","_this$state2","className","full_name","es","height","maintainAspectRatio","App","_onSelectRepo","components_Search_Search","components_RepoStats_RepoStats","Boolean","window","location","hostname","match","ReactDOM","render","src_components_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"+UAkCeA,aA5Bb,SAAAA,IAEE,GAFYC,OAAAC,EAAA,EAAAD,CAAAE,KAAAH,GAETG,KAAKC,SACN,OAAOD,KAAKC,SAEdD,KAAKC,SAAWD,qDAQdE,GACF,IAAMC,EAASH,KAAKI,YAAYC,SAASH,GACzC,OAAOI,IAAMC,IAAIJ,sCAQHK,GACd,SAAAC,OAAUC,0BAAVD,OAA0CD,YCgC/BG,aAvDb,SAAAA,IAEE,GAFab,OAAAC,EAAA,EAAAD,CAAAE,KAAAW,GAETX,KAAKC,SACP,OAAOD,KAAKC,SAGdD,KAAKY,KAAO,IAAIf,EAChBG,KAAKC,SAAWD,mEAQAa,GAChB,OAAOb,KAAKY,KAAKL,IAAV,UAAAE,OAAwBI,EAAxB,WACJC,KAAK,SAAAC,GAIJ,OAHAA,EAAKC,KAAQD,EAAKE,KAAKC,OAEnB,cADA,iBAEGH,IAERI,MAAM,SAAAC,GACL,OAAQA,EAAIC,SAASC,QAEnB,KAAK,IACH,MAAO,CAAEL,KAAM,GAAID,KAAM,kBAC3B,QACE,OAAOI,oDAWwB,IAApBG,EAAoBC,EAApBD,SAAUE,EAAUD,EAAVC,SAC7B,OAAOzB,KAAKY,KAAKL,IAAV,UAAAE,OAAwBc,EAAxB,KAAAd,OAAoCgB,EAApC,kBACJX,KAAK,SAAAC,GAOJ,OANAA,EAAKC,KAAO,cAEO,MAAhBD,EAAKO,SACNP,EAAKE,KAAO,GACZF,EAAKC,KAAO,mBAEPD,sBCjDTW,UAAc,kBA4ELC,6MApEbC,MAAQ,CACNC,WAAW,EACXC,QAAS,GACTC,WAAYL,EACZb,MAAO,MAsBTmB,aAAe,IAAIrB,IAQnBsB,cAAgB,SAAAT,GAAA,IAAEU,EAAFpC,OAAAqC,EAAA,EAAArC,CAAA0B,EAAA,cAEdU,GAAWE,EAAKC,MAAMC,aAAaJ,MAQrCK,cAAgB,SAAC1B,GACfuB,EAAKI,SAAS,CAACX,WAAW,EAAMC,QAAS,KACzCM,EAAKJ,aAAaS,kBAAkB5B,GACjCC,KAAK,SAAA4B,GAA8B,IAArBZ,EAAqBY,EAA3BzB,KAAgBD,EAAW0B,EAAX1B,KAEnB2B,EAAa,CACfb,UACAD,WAAW,EACXE,WAAYL,GAIF,mBAATV,IACD2B,EAAWZ,WAAX,SAAAtB,OAAiCI,EAAjC,2BAEFuB,EAAKI,SAASG,8EApDX,IAAAC,EACkC5C,KAAK4B,MAAvCC,EADAe,EACAf,UAAWC,EADXc,EACWd,QAASC,EADpBa,EACoBb,WAC3B,OACEc,EAAAC,EAAAC,cAAA,eACEF,EAAAC,EAAAC,cAACC,EAAA,eAAD,CACEC,WAAS,EACTnB,QAASA,EACToB,SAAUlD,KAAKuC,cACfY,SAAUnD,KAAKiC,cACfmB,UAAW,EACXC,SAAS,YACTxB,UAAWA,EACXE,WAAYA,EACZuB,YAAY,+DA1BDC,IAAMC,6BCNrBC,EAAoB,WACxB,IAAMC,EAAIC,KAAKC,MAAOC,EAAIF,KAAKG,OAC/B,MAAO,CAACJ,EADmC,IACjCG,KAAOH,EAD0B,IACxBG,KAAOH,EADiB,IACfG,MAAQE,KAAK,MC4G5BC,qNAxGbpC,MAAQ,CACNqC,MAAO,gBACPC,aAAc,GACdC,UAAW,CACTC,OAAQ,GACRC,SAAU,OAiCdrC,aAAe,IAAIrB,IAEnB2D,uBAAyB,WAAM,IAAAC,EACLnC,EAAKC,MAAMmC,KAA3BC,EADqBF,EACrBE,KAAMC,EADeH,EACfG,MAEdtC,EAAKJ,aAAa2C,oBAAoB,CACpClD,SAAUgD,EACVlD,SAAUmD,EAAME,QAEf9D,KAAK,SAAAU,GAAkC,IAAzB0C,EAAyB1C,EAA/BP,KAAoBD,EAAWQ,EAAXR,KAEf,gBAATA,GAGDoB,EAAKI,SAAS,CAAE0B,iBAChB9B,EAAKyC,8BACY,oBAAT7D,GACRoB,EAAKI,SAAS,CAAE0B,aAAc,GAAID,MAAO,kCAMjDY,2BAA6B,WAAM,IAAAjC,EACGR,EAAKR,MAAjCsC,EADyBtB,EACzBsB,aAAcC,EADWvB,EACXuB,UAGhBW,EAAYhF,OAAAiF,EAAA,EAAAjF,CAAA,GAAQqE,GAE1B,GAAID,EAAahD,OAAQ,CAGvB,IACED,EAAO,GACPmD,EAAS,GACTY,EAAc,GACdC,EAAkB,GAClBC,EAAmB,GACnBC,EAAuB,GAGzBjB,EAAakB,QAAQ,SAACC,GACpB,IAAMC,EAAY7B,IAClBW,EAAOmB,KAAKF,EAAKT,OACjB3D,EAAKsE,KAAKF,EAAKG,eACfR,EAAYO,KAAZ,QAAA9E,OAAyB6E,EAAzB,QACAL,EAAgBM,KAAhB,QAAA9E,OAA6B6E,EAA7B,UACAJ,EAAiBK,KAAjB,QAAA9E,OAA8B6E,EAA9B,QACAH,EAAqBI,KAArB,QAAA9E,OAAkC6E,EAAlC,YAGFR,EAAaV,OAASA,EAEtBU,EAAaT,SAAW,CAAC,CACvBoB,YAAa,EAAGC,MAAO,gBACvBzE,OAAM+D,cAAaC,kBAAiBC,mBAAkBC,yBAExD/C,EAAKI,SAAS,CAAE2B,UAAWW,wFAtFZa,GACjB,IAAMnB,EAAOxE,KAAKqC,MAAMmC,KAClBoB,EAAWD,EAAUnB,MAEvBA,GAAUoB,GAAYpB,EAAKqB,KAAOD,EAASC,IAC7C7F,KAAKsE,0DAIA,IAAAwB,EACoC9F,KAAK4B,MAAxCsC,EADD4B,EACC5B,aAAcC,EADf2B,EACe3B,UAAWF,EAD1B6B,EAC0B7B,MACzBO,EAASxE,KAAKqC,MAAdmC,KACR,OAAON,EAAahD,OAEhB2B,EAAAC,EAAAC,cAAA,WAASgD,UAAU,oDACjBlD,EAAAC,EAAAC,cAAA,UAAMyB,EAAKwB,WACXnD,EAAAC,EAAAC,cAACkD,EAAA,EAAD,CACEhF,KAAOkD,EACP+B,OAAS,IACTpE,QAAU,CAAEqE,qBAAqB,MAIrCtD,EAAAC,EAAAC,cAAA,WAASgD,UAAU,oDACjBlD,EAAAC,EAAAC,cAAA,UAAKkB,WAnCSV,IAAMC,YCwBf4C,qNAxBbxE,MAAQ,CACN4C,KAAM,QAmBR6B,cAAgB,SAAA7B,GAAI,OAAIpC,EAAKI,SAAS,CAAEgC,kFAftC,OACE3B,EAAAC,EAAAC,cAAA,WAASgD,UAAU,mBACjBlD,EAAAC,EAAAC,cAAA,UAAQgD,UAAU,+BAChBlD,EAAAC,EAAAC,cAAA,qCAA4BF,EAAAC,EAAAC,cAAA,uBAE9BF,EAAAC,EAAAC,cAACuD,EAAD,CACEhE,aAAetC,KAAKqG,gBAEtBxD,EAAAC,EAAAC,cAACwD,EACMvG,KAAK4B,eAhBF4B,cCKEgD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,uFCNNC,IAASC,OAAOjE,EAAAC,EAAAC,cAACgE,EAAD,MAASC,SAASC,eAAe,SD+G3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMtG,KAAK,SAAAuG,GACjCA,EAAaC","file":"static/js/main.8fa43bd0.chunk.js","sourcesContent":["import axios from 'axios';\r\n\r\nclass Http {\r\n\r\n  instance;\r\n\r\n  constructor(){\r\n    // singleton pattern for Http Service\r\n    if(this.instance){\r\n      return this.instance\r\n    }\r\n    this.instance = this;\r\n  }\r\n\r\n  /**\r\n   * Performs an HTTP GET request with the given url\r\n   * @param url\r\n   * @returns {AxiosPromise}\r\n   */\r\n  get(url){\r\n    const getUrl = this.constructor.buildUrl(url);\r\n    return axios.get(getUrl);\r\n  }\r\n\r\n  /**\r\n   * Creates the final version of an API endpoint\r\n   * @param urlToBuild\r\n   * @returns {string}\r\n   */\r\n  static buildUrl(urlToBuild){\r\n    return `${process.env.REACT_APP_API_URl}${urlToBuild}`;\r\n  }\r\n\r\n}\r\nexport default Http;\r\n","import Http from './Http';\r\n\r\nclass RepoService {\r\n\r\n  // holds the service singleton instance\r\n  instance;\r\n\r\n  constructor() {\r\n    // singleton pattern for the RepoService\r\n    if (this.instance) {\r\n      return this.instance;\r\n    }\r\n    // creates the Http Service Singleton instance\r\n    this.http = new Http();\r\n    this.instance = this;\r\n  }\r\n\r\n  /**\r\n   * Searches the given user repo list\r\n   * @param query\r\n   * @returns {Promise<T>}\r\n   */\r\n  searchReposByUser(query) {\r\n    return this.http.get(`/users/${query}/repos`)\r\n      .then(resp => {\r\n        resp.slug = !resp.data.length\r\n          ? 'no-public-repo'\r\n          : 'response-ok';\r\n        return resp;\r\n      })\r\n      .catch(err => {\r\n        switch (err.response.status) {\r\n          // in case of 404, returns an empty\r\n          case 404:\r\n            return { data: [], slug: 'user-not-found' };\r\n          default:\r\n            return err;\r\n        }\r\n      });\r\n  }\r\n\r\n  /**\r\n   * Gets contributors by repo\r\n   * @param userName\r\n   * @param repoName\r\n   * @returns {Promise<T>}\r\n   */\r\n  getRepoContributors({userName, repoName}){\r\n    return this.http.get(`/repos/${userName}/${repoName}/contributors`)\r\n      .then(resp => {\r\n        resp.slug = 'response-ok';\r\n        // in case of no contributors\r\n        if(resp.status === 204){\r\n          resp.data = [];\r\n          resp.slug = 'no-contributors'\r\n        }\r\n        return resp;\r\n      });\r\n  }\r\n\r\n}\r\n\r\nexport default RepoService;","import React from 'react';\r\nimport RepoService from 'src/services/RepoService';\r\nimport { AsyncTypeahead } from 'react-bootstrap-typeahead';\r\nimport './Search.scss';\r\nimport propTypes from 'prop-types';\r\n\r\n// default empty results message\r\nconst EMPTY_LABEL = 'User not found';\r\n\r\nclass Search extends React.Component {\r\n\r\n  /**\r\n   * @param {{full_name:string}} suggestion\r\n   */\r\n\r\n  state = {\r\n    isLoading: false,\r\n    options: [],\r\n    emptyLabel: EMPTY_LABEL,\r\n    query: '',\r\n  };\r\n\r\n  render() {\r\n    const {isLoading, options, emptyLabel} = this.state;\r\n    return (\r\n      <section>\r\n        <AsyncTypeahead\r\n          autoFocus\r\n          options={options}\r\n          onSearch={this._handleSearch}\r\n          onChange={this._handleSelect}\r\n          minLength={2}\r\n          labelKey=\"full_name\"\r\n          isLoading={isLoading}\r\n          emptyLabel={emptyLabel}\r\n          placeholder=\"Type a GitHub user name to search its repo list...\"\r\n        />\r\n      </section>\r\n    );\r\n  }\r\n\r\n  _repoService = new RepoService();\r\n\r\n  /**\r\n   * Calls the prop function when the user selects a valid value\r\n   * valid !== undefined/null/false/empty...\r\n   * @param selected\r\n   * @private\r\n   */\r\n  _handleSelect = ([selected]) => (\r\n    // Only selects the new value when valid, otherwise do nothing\r\n    selected ? this.props.onSelectRepo(selected) : false\r\n  );\r\n\r\n  /**\r\n   * Do the API search\r\n   * @param query\r\n   * @private\r\n   */\r\n  _handleSearch = (query) => {\r\n    this.setState({isLoading: true, options: []});\r\n    this._repoService.searchReposByUser(query)\r\n      .then(({ data: options , slug }) => {\r\n        // default state obj to be set\r\n        let stateToSet = {\r\n          options,\r\n          isLoading: false,\r\n          emptyLabel: EMPTY_LABEL\r\n        };\r\n        // changes the \"nothing found\" message when the user was found\r\n        // but has no public repos to show\r\n        if(slug === 'no-public-repo'){\r\n          stateToSet.emptyLabel = `User \"${query}\" has no repos to show`;\r\n        }\r\n        this.setState(stateToSet);\r\n      })\r\n  }\r\n}\r\n\r\nSearch.propTypes = {\r\n  onSelectRepo: propTypes.func\r\n};\r\n\r\nexport default Search;","/**\r\n * Generate a random RGB color\r\n */\r\nconst generateRgbaColor = () => {\r\n  const o = Math.round, r = Math.random, s = 255;\r\n  return [o(r()*s),o(r()*s),o(r()*s)].join(',');\r\n};\r\n\r\nexport { generateRgbaColor };","import React from 'react';\r\nimport propTypes from 'prop-types';\r\nimport RepoService from 'src/services/RepoService';\r\nimport { Bar } from 'react-chartjs-2';\r\nimport { generateRgbaColor } from \"src/utils/Color\";\r\nimport './RepoStats.scss';\r\n\r\nclass RepoStats extends React.Component {\r\n\r\n  state = {\r\n    title: 'Select a repo',\r\n    contributors: [],\r\n    chartData: {\r\n      labels: [],\r\n      datasets: []\r\n    }\r\n  };\r\n\r\n  componentDidUpdate(prevProps) {\r\n    const repo = this.props.repo;\r\n    const prevRepo = prevProps.repo;\r\n\r\n    if (repo && (!prevRepo || repo.id !== prevRepo.id)) {\r\n      this._fetchRepoContributors();\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { contributors, chartData, title } = this.state;\r\n    const { repo } = this.props;\r\n    return contributors.length\r\n      ? (\r\n        <section className='container-fluid text-center RepoStats__bar-chart'>\r\n          <h3>{ repo.full_name }</h3>\r\n          <Bar\r\n            data={ chartData }\r\n            height={ 300 }\r\n            options={ { maintainAspectRatio: false } }\r\n          />\r\n        </section>\r\n      ) : (\r\n        <section className='container-fluid text-center RepoStats__bar-chart'>\r\n          <h3>{title}</h3>\r\n        </section>\r\n      );\r\n  }\r\n\r\n  _repoService = new RepoService();\r\n\r\n  _fetchRepoContributors = () => {\r\n    const { name, owner } = this.props.repo;\r\n    // gets the repo contributors list\r\n    this._repoService.getRepoContributors({\r\n      repoName: name,\r\n      userName: owner.login,\r\n    })\r\n      .then(({ data: contributors, slug }) => {\r\n\r\n        if(slug === 'response-ok'){\r\n          // feeds thee state with the returned data\r\n          // and parse the data to be applied on the bar chart\r\n          this.setState({ contributors });\r\n          this._parseDataFromContributors();\r\n        } else if(slug === 'no-contributors'){\r\n          this.setState({ contributors: [], title: 'Repo has no contributors' });\r\n        }\r\n\r\n      });\r\n  };\r\n\r\n  _parseDataFromContributors = () => {\r\n    const { contributors, chartData } = this.state;\r\n    // creating a copy of the current chartData on the state,\r\n    // to update its structure\r\n    const newChartData = { ...chartData };\r\n\r\n    if (contributors.length) {\r\n      // this code is a bit messy I know, but I have to set a new array\r\n      // for each data set with individual configuration for each color...\r\n      const\r\n        data = [],\r\n        labels = [],\r\n        borderColor = [],\r\n        backgroundColor = [],\r\n        hoverBorderColor = [],\r\n        hoverBackgroundColor = [];\r\n      // creates the data necessary\r\n      // to show the bar chart\r\n      contributors.forEach((user) => {\r\n        const baseColor = generateRgbaColor();\r\n        labels.push(user.login);\r\n        data.push(user.contributions);\r\n        borderColor.push(`rgba(${baseColor},1)`);\r\n        backgroundColor.push(`rgba(${baseColor},0.2)`);\r\n        hoverBorderColor.push(`rgba(${baseColor},1)`);\r\n        hoverBackgroundColor.push(`rgba(${baseColor},0.4)`);\r\n      });\r\n      // feeds the new data set object with all generated data arrays\r\n      newChartData.labels = labels;\r\n      // we only have one data set here, the contributions for each user to the repo\r\n      newChartData.datasets = [{\r\n        borderWidth: 1, label: 'Contributions',\r\n        data, borderColor, backgroundColor, hoverBorderColor, hoverBackgroundColor,\r\n      }];\r\n      this.setState({ chartData: newChartData });\r\n    }\r\n  };\r\n}\r\n\r\nRepoStats.propTypes = {\r\n  repo: propTypes.object\r\n};\r\n\r\nexport default RepoStats;","import React, { Component } from 'react';\r\nimport Search from 'src/components/Search/Search';\r\nimport RepoStats from \"./RepoStats/RepoStats\";\r\nimport './App.scss';\r\n\r\nclass App extends Component {\r\n\r\n  state = {\r\n    repo: null\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <section className=\"container-fluid\">\r\n        <header className=\"jumbotron-fluid App__header\">\r\n          <h2>GitHub User Repos Stats <small>v0.1</small></h2>\r\n        </header>\r\n        <Search\r\n          onSelectRepo={ this._onSelectRepo }\r\n        />\r\n        <RepoStats\r\n          { ...this.state }\r\n        />\r\n      </section>\r\n    );\r\n  }\r\n\r\n  _onSelectRepo = repo => this.setState({ repo });\r\n\r\n}\r\n\r\nexport default App;\r\n","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the old content will have been purged and\r\n              // the fresh content will have been added to the cache.\r\n              // It's the perfect time to display a \"New content is\r\n              // available; please refresh.\" message in your web app.\r\n              console.log('New content is available; please refresh.');\r\n\r\n              // Execute callback\r\n              if (config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'react-app-polyfill/ie11';\r\nimport App from 'src/components/App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'bootstrap/dist/css/bootstrap.css'\r\nimport 'react-bootstrap-typeahead/css/Typeahead.css';\r\nimport 'react-bootstrap-typeahead/css/Typeahead-bs4.css';\r\nimport './index.css';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}